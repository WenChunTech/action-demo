name: cross-release
on:
    workflow_dispatch:
    push:
      tags:
        - '**'
env:
  # The project name specified in your Cargo.toml
  PROJECT_NAME: action-demo

jobs:
  release:
    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        include:
          - name: linux-amd64-gnu
            runner: ubuntu-latest
            target: x86_64-unknown-linux-gnu
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: "${{ matrix.target }}"

      - name: Run sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5

      - name: Build Binary
        env:
          SCCACHE_GHA_ENABLED: "true"
          RUSTC_WRAPPER: "sccache"
        run: |
          pwd
          ls
          bash corss.sh
          ls target/*/release/

      # - name: Release Binary
      #   shell: bash
      #   run: |
      #     BIN_SUFFIX=""
      #     if [[ "${{ matrix.runner }}" == "windows-latest" ]]; then
      #       BIN_SUFFIX=".exe"
      #     fi
      #     ls target/*
      #     # The built binary output location
      #     BIN_OUTPUT="target/${{ matrix.target }}/release/${PROJECT_NAME}${BIN_SUFFIX}"

      #     # Define a better name for the final binary
      #     BIN_RELEASE="${PROJECT_NAME}-${{ matrix.name }}${BIN_SUFFIX}"
      #     BIN_RELEASE_VERSIONED="${PROJECT_NAME}-${{ github.ref_name }}-${{ matrix.name }}${BIN_SUFFIX}"
      #     tar -zcf "${PROJECT_NAME}.tar.gz" "${BIN_OUTPUT}"

      #     # Move the built binary where you want it
      #     # mv "${BIN_OUTPUT}" "./<your-destination>/${BIN_RELEASE}"

      # - name : upload binary
      #   uses: actions/upload-artifact@master
      #   if: always()
      #   with:
      #     name: ${PROJECT_NAME}-${{ matrix.name }}.tar.gz
      #     path: ./*.tar.gz